---
- name: Deploy NGINX Docker to ECR
  hosts: localhost
  connection: local
  vars_files:
    - vars/main.yml
  vars:
    ecr_registry: 891376930154.dkr.ecr.us-east-1.amazonaws.com/web
  tasks:

    - name: Cargar variables AWS desde entorno
      set_fact:
        aws_access_key_id: "{{ lookup('env','AWS_ACCESS_KEY_ID') }}"
        aws_secret_access_key: "{{ lookup('env','AWS_SECRET_ACCESS_KEY') }}"
        aws_session_token: "{{ lookup('env','AWS_SESSION_TOKEN') }}"

    - name: Iniciar servicio Docker
      ansible.builtin.service:
        name: docker
        state: started
        enabled: true

    - name: Asegurar estructura de SSL y nginx
      ansible.builtin.file:
        path: "{{ item.path }}"
        state: directory
        mode: "{{ item.mode }}"
      loop:
        - { path: /etc/nginx/conf.d,      mode: '0755' }
        - { path: /etc/ssl/private,       mode: '0700' }

    - name: Copiar configuraciones y certificados
      ansible.builtin.copy:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        mode: "{{ item.mode }}"
      loop:
        - { src: ../templates/nginx.conf.j2,     dest: /etc/nginx/nginx.conf,      mode: '0644' }
        - { src: ../templates/server.conf.j2,    dest: /etc/nginx/server.conf,     mode: '0644' }
        - { src: ../certificados/certificado.crt, dest: /etc/ssl/certificado.crt,    mode: '0644' }
        - { src: ../certificados/private.key,    dest: /etc/ssl/private/key.pem,    mode: '0600' }

    - name: Construir imagen nginx
      community.docker.docker_image:
        path: /etc/nginx
        name: nginx-alejandro3
        tag: latest
        state: present

    - name: Logear en ECR
      amazon.aws.aws_ecr:
        registry_ids: ["891376930154"]
        region: us-east-1
        aws_access_key: "{{ aws_access_key_id }}"
        aws_secret_key: "{{ aws_secret_access_key }}"
        aws_session_token: "{{ aws_session_token }}"

    - name: Etiquetar y subir imagen a ECR
      community.docker.docker_image:
        name: nginx-alejandro3:latest
        push: true
        repository: "{{ ecr_registry }}/nginx3"

    - name: Limpiar build artifacts
      file:
        path: /tmp/nginx_build
        state: absent

- name: Deploy PHP & SQL Containers to ECR
  hosts: localhost
  connection: local
  vars_files:
    - vars/main.yml
  vars:
    ecr_registry: 891376930154.dkr.ecr.us-east-1.amazonaws.com/web
  tasks:

    - name: Eliminar contenedores previos
      community.docker.docker_container:
        name: "{{ item }}"
        state: absent
      loop:
        - php-container
        - sql-container

    - name: Copiar init.sql
      ansible.builtin.copy:
        src: ../templates/init.sql.j2
        dest: /home/runner/init.sql
        mode: '0644'

    - name: Construir y subir im√°genes PHP y SQL
      block:
        - name: Construir {{ item.name }}
          community.docker.docker_image:
            build:
              path: /home/runner
              dockerfile: "{{ item.dockerfile }}"
            name: "{{ item.image }}:latest"
        - name: Logear en ECR
          amazon.aws.aws_ecr:
            registry_ids: ["891376930154"]
            region: us-east-1
            aws_access_key: "{{ aws_access_key_id }}"
            aws_secret_key: "{{ aws_secret_access_key }}"
            aws_session_token: "{{ aws_session_token }}"
        - name: Etiquetar y push {{ item.image }}
          community.docker.docker_image:
            name: "{{ item.image }}:latest"
            push: true
            repository: "{{ ecr_registry }}/{{ item.tag }}"
      loop:
        - { name: "PHP",  image: "php-container", dockerfile: "Dockerfilephp", tag: "php" }
        - { name: "SQL",  image: "sql-container", dockerfile: "Dockerfilesql", tag: "sql" }
